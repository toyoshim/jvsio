// Copyright 2021 Takashi Toyoshima <toyoshim@gmail.com>.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if !defined(__JVSIO_H__)
#define __JVSIO_H__

#include <stdbool.h>
#include <stdint.h>

#include "jvsio_clients.h"

// JVSIO provides JVS (Jamma Video Standard 3.0) I/O transport,
// differential serial at 115.2Kbps, 8-bits, 1-start/stop bits, non parity.
// This library can not use with the Serial library because RXI is used
// internally.
// Incomoing data is analyzed by the hardware serial peripheral, RXI.
// The library just reads data from Data+ pin, but ignores Data-.
// Outgoint data is generated by hand-crafted code because the hardware
// does not support differential serial output.

enum JVSIO_Cmd {
  kCmdReset = 0xF0,       // mandatory
  kCmdAddressSet = 0xF1,  // mandatory

  kCmdIoId = 0x10,           // mandatory
  kCmdCommandRev = 0x11,     // mandatory
  kCmdJvRev = 0x12,          // mandatory
  kCmdProtocolVer = 0x13,    // mandatory
  kCmdFunctionCheck = 0x14,  // mandatory
  kCmdMainId = 0x15,

  kCmdSwInput = 0x20,
  kCmdCoinInput = 0x21,
  kCmdAnalogInput = 0x22,
  kCmdRotaryInput = 0x23,
  kCmdKeyCodeInput = 0x24,
  kCmdScreenPositionInput = 0x25,

  kCmdRetry = 0x2F,  // mandatory

  kCmdCoinSub = 0x30,
  kCmdDriverOutput = 0x32,
  kCmdAnalogOutput = 0x33,
  kCmdCharacterOutput = 0x34,
  kCmdCoinAdd = 0x35,

  kCmdNamco = 0x70,  // vendor specific.

  // JVS Dash
  kCmdCommSup = 0xD0,
  kCmdCommChg = 0xF2,

  kReportOk = 0x01,
  kReportParamErrorNoResponse = 0x02,
  kReportParamErrorIgnored = 0x03,
  kReportBusy = 0x04,
};

struct JVSIO_Lib {
  // For client nodes.
  uint8_t* (*getNextCommand)(uint8_t* len, uint8_t* node);
  uint8_t* (*getNextSpeculativeCommand)(uint8_t* len, uint8_t* node);
  void (*pushReport)(uint8_t report);
  void (*sendUnknownStatus)();
  bool (*isBusy)();

#if !defined(__NO_JVS_HOST__)
  // For hosts.
  bool (*host)(struct JVSIO_HostClient* client);
  void (*sync)();
#endif
};

struct JVSIO_Lib* JVSIO_open(struct JVSIO_DataClient* data,
                             struct JVSIO_SenseClient* sense,
                             struct JVSIO_LedClient* led,
                             struct JVSIO_TimeClient* time,
                             uint8_t nodes);

#endif  // !defined(__JVSIO_H__)
